/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "generate_debug_options.py" and edit the "DebugOptions" function there.
 * -----------------------------------------------------------------------------
 */

#include "Cool/ImGui/ImGuiExtras.h"
#include "Cool/Path/Path.h"
#include "Cool/Serialization/Json.hpp"
#include "Cool/Serialization/JsonAutoSerializer.hpp"
#include "wafl/wafl.hpp"

namespace Cool {
template<typename... Ts>
class DebugOptionsManager; // Forward declare this class so that the friend declaration that comes later on doesn't fail.
}

namespace Launcher {

class DebugOptions {
public:
    [[nodiscard]] static auto log_when_uninstalling_versions_automatically() -> bool { return instance().log_when_uninstalling_versions_automatically; }

    struct Set {
        static void log_when_uninstalling_versions_automatically(bool val)
        {
            if (val == instance().log_when_uninstalling_versions_automatically)
                return;
            instance().log_when_uninstalling_versions_automatically = val;
            save();
        }
    };

    static void save() { instance()._serializer.save(); }

private:
    struct Instance {
        bool log_when_uninstalling_versions_automatically{false};

        // Must be declared last, after all the variables it serializes, so that the values it loads overwrite the default values, and not the other way around
        Cool::JsonAutoSerializer _serializer{
            "debug_options_launcher.json",
            false /*autosave_when_destroyed*/, // This is a static instance, so saving it in the destructor is dangerous because we don't know when it will happen exactly. Instead, we call save manually at the end of the run()
            [&](nlohmann::json const& json) {

#if DEBUG
                Cool::json_get(json, "Log when uninstalling versions automatically", log_when_uninstalling_versions_automatically);
#else
                Cool::json_get(json, "Log when uninstalling versions automatically", log_when_uninstalling_versions_automatically);
#endif
            },
            [&](nlohmann::json& json) {

#if DEBUG
                Cool::json_set(json, "Log when uninstalling versions automatically", log_when_uninstalling_versions_automatically);
#else
                Cool::json_set(json, "Log when uninstalling versions automatically", log_when_uninstalling_versions_automatically);
#endif
            },
            false /*use_shared_user_data*/,
            Cool::WantsToLogWarnings::CheckInDebugOption
        };
    };

    static auto instance() -> Instance&
    {
        static auto the_instance = Instance{};
        return the_instance;
    }

    static void load() { instance()._serializer.load(); }
    static void update() { instance()._serializer.update(); }

    static void reset_all()
    {
        instance().log_when_uninstalling_versions_automatically = false;
        save();
    }

    template<typename... Ts>
    friend class Cool::DebugOptionsManager; // We go through this indirection so that only the files which include "DebugOptionsManager" can call `imgui_ui_for_all_options()`

    static void imgui_ui_for_all_options(std::string_view filter)
    {
        if (wafl::similarity_match({filter, "Log when uninstalling versions automatically"}) >= wafl::Matches::Strongly)
        {
            if (Cool::ImGuiExtras::toggle("Log when uninstalling versions automatically", &instance().log_when_uninstalling_versions_automatically))
                save();
        }
    }

    static void toggle_first_option(std::string_view filter)
    {
        if (wafl::similarity_match({filter, "Log when uninstalling versions automatically"}) >= wafl::Matches::Strongly)
        {
            instance().log_when_uninstalling_versions_automatically = !instance().log_when_uninstalling_versions_automatically;
            save();
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }
    }
};

} // namespace Launcher

name: Release Installer
true:
  push:
    tags:
    - '*'
env:
  cmake_configure_args: ''
  cmakelists_folder: .
  cmake_target: Coollab-Launcher
  PACK_ID: Launcher-Velopack-Tests
  MAIN_EXE: main.exe
  BUILD_DIR: build
  RELEASE_DIR: Releases
jobs:
  create-release-executables:
    name: ${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: Windows
          os: windows-latest
          cmake_configure_args: -D CMAKE_C_COMPILER=cl CMAKE_CXX_COMPILER=cl -G Ninja
            -D VCPKG_TARGET_TRIPLET=x64-windows-static
          cpack_generator: NSIS
          installer_name: Coollab-Launcher-Windows.exe
        - name: Linux
          os: ubuntu-22.04
          cmake_configure_args: -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++
            -G Ninja
          cpack_generator: STGZ
          installer_name: Coollab-Launcher-Linux.sh
        - name: MacOS
          os: macos-latest
          cmake_configure_args: -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++
            -G Ninja -D OPENSSL_ROOT_DIR=/usr/local/opt/openssl
          cpack_generator: Bundle
          installer_name: Coollab-Launcher-MacOS.dmg
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Set up MSVC
      if: matrix.config.name == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1.13.0
    - name: Cache vcpkg
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      with:
        path: '${{ runner.temp }}/vcpkg

          '
        key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: vcpkg-${{ runner.os }}-
    - name: Cache vcpkg installed packages
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      with:
        path: '${{ runner.temp }}/vcpkg/installed

          ${{ runner.temp }}/vcpkg/buildtrees

          '
        key: vcpkg-packages-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: vcpkg-packages-${{ runner.os }}-
    - name: Install vcpkg
      if: runner.os == 'Windows'
      run: "if not exist \"${{ runner.temp }}\\vcpkg\" (\n  git clone https://github.com/microsoft/vcpkg.git\
        \ ${{ runner.temp }}\\vcpkg\n  cd ${{ runner.temp }}\\vcpkg\n  .\\bootstrap-vcpkg.bat\n\
        )\n"
      shell: cmd
    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: '${{ runner.temp }}\vcpkg\vcpkg.exe install openssl:x64-windows-static

        '
      shell: cmd
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: 'sudo apt-get update -y

        sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
        mesa-common-dev build-essential libgtk-3-dev

        sudo apt-get install -y libssl-dev

        sudo apt-get install -y libpulse-dev libasound2-dev

        sudo apt-get install -y libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev
        libavutil-dev libpostproc-dev libswresample-dev libswscale-dev

        '
    - name: Install MacOS dependencies
      if: runner.os == 'MacOS'
      run: 'brew install ffmpeg

        '
    - name: ccache
      uses: hendrikmuhs/ccache-action@main
      with:
        key: ${{matrix.config.name}} Clang-Release
    - name: Set CMake Toolchain Argument
      if: runner.os == 'Windows'
      run: echo "CMAKE_TOOLCHAIN_ARG=-D CMAKE_TOOLCHAIN_FILE=${{ runner.temp }}\vcpkg\scripts\buildsystems\vcpkg.cmake"
        >> $GITHUB_ENV
      shell: bash
    - name: Build
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: ${{github.workspace}}/${{env.cmakelists_folder}}/CMakeLists.txt
        cmakeAppendedArgs: ${{env.cmake_configure_args}} -D CPACK_GENERATOR=${{matrix.config.cpack_generator}}
          -D CMAKE_BUILD_TYPE=Release ${{matrix.config.cmake_configure_args}} -D CMAKE_C_COMPILER_LAUNCHER=ccache
          -D CMAKE_CXX_COMPILER_LAUNCHER=ccache ${{ env.CMAKE_TOOLCHAIN_ARG }}
        buildWithCMakeArgs: --config Release --target ${{env.cmake_target}}
        cmakeBuildType: Release
        buildDirectory: ${{github.workspace}}/build
    - name: Build app bundle (MacOS)
      if: runner.os == 'MacOS'
      run: "mkdir -p \"${{github.workspace}}/app-resources/Coollab-Launcher.app/Contents/Resources\"\
        \nmkdir -p \"${{github.workspace}}/app-resources/Coollab-Launcher.app/Contents/MacOS\"\
        \nrsync -av --exclude='Coollab-Launcher' \"${{github.workspace}}/bin/Release/\"\
        \ \"${{github.workspace}}/app-resources/Coollab-Launcher.app/Contents/Resources/\"\
        \ncp \"${{github.workspace}}/bin/Release/Coollab-Launcher\" \"${{github.workspace}}/app-resources/Coollab-Launcher.app/Contents/MacOS/Coollab-Launcher\"\
        \n# Recursively find and copy all dynamic libraries\nEXECUTABLE=\"${{ github.workspace\
        \ }}/app-resources/Coollab-Launcher.app/Contents/MacOS/Coollab-Launcher\"\n\
        FRAMEWORKS_DIR=\"${{ github.workspace }}/app-resources/Coollab-Launcher.app/Contents/Frameworks\"\
        \n mkdir -p \"$FRAMEWORKS_DIR\"\n function resolve_rpath_lib {\n    LIB_NAME=$1\n\
        \    LIB_PATH=$(find /usr/local /opt/homebrew -name \"$LIB_NAME\" 2>/dev/null\
        \ | head -n 1)\n    echo \"$LIB_PATH\"\n}\n function process_library {\n \
        \   TARGET_LIB=$1\n    otool -L \"$TARGET_LIB\" | awk '{print $1}' | while\
        \ read -r lib; do\n      BASENAME=$(basename \"$lib\")\n       if [[ \"$lib\"\
        \ == @rpath/* ]]; then\n          REAL_LIB_PATH=$(resolve_rpath_lib \"$BASENAME\"\
        )\n      elif [[ \"$lib\" == \"$HOMEBREW_PREFIX\"* ]]; then\n          REAL_LIB_PATH=\"\
        $lib\"\n      else\n          continue\n      fi\n       if [[ -n \"$REAL_LIB_PATH\"\
        \ && ! -f \"$FRAMEWORKS_DIR/$BASENAME\" ]]; then\n          echo \"Copying\
        \ $REAL_LIB_PATH to $FRAMEWORKS_DIR\"\n          cp \"$REAL_LIB_PATH\" \"\
        $FRAMEWORKS_DIR/\"\n          chmod +w \"$FRAMEWORKS_DIR/$BASENAME\"\n   \
        \       process_library \"$FRAMEWORKS_DIR/$BASENAME\"\n      fi\n    done\n\
        }\nprocess_library \"$EXECUTABLE\"\n # Update rpath for copied libraries:\n\
        \ install_name_tool -add_rpath \"@executable_path/../Frameworks\" \"$EXECUTABLE\"\
        \n # Change library paths in the executable\notool -L \"$EXECUTABLE\" | awk\
        \ '{print $1}' | grep \"^/opt/homebrew\\|^/usr/local\" | while read -r lib;\
        \ do\n  BASENAME=$(basename \"$lib\")\n  DEST_LIB=\"$FRAMEWORKS_DIR/$BASENAME\"\
        \n   if [[ -f \"$DEST_LIB\" ]]; then\n    echo \"Updating $EXECUTABLE: changing\
        \ $lib -> @rpath/$BASENAME\"\n    install_name_tool -change \"$lib\" \"@rpath/$BASENAME\"\
        \ \"$EXECUTABLE\"\n  fi\ndone\n # Change library paths for each copied Homebrew\
        \ library\nfor LIB in \"$FRAMEWORKS_DIR\"/*; do\n  otool -L \"$LIB\" | awk\
        \ '{print $1}' | grep \"^/opt/homebrew\\|^/usr/local\" | while read -r dep;\
        \ do\n    DEP_BASENAME=$(basename \"$dep\")\n    DEST_DEP=\"$FRAMEWORKS_DIR/$DEP_BASENAME\"\
        \n     if [[ -f \"$DEST_DEP\" ]]; then\n      echo \"Updating $LIB: changing\
        \ $dep -> @rpath/$DEP_BASENAME\"\n      install_name_tool -change \"$dep\"\
        \ \"@rpath/$DEP_BASENAME\" \"$LIB\"\n    fi\n  done\ndone\n"
    - name: Codesign and Notarize (MacOS)
      if: runner.os == 'MacOS'
      env:
        CERTIFICATE_BASE64: ${{ secrets.APPLE_DEVELOPER_ID_CERTIFICATE }}
        CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEVELOPER_ID_CERTIFICATE_PASSWORD
          }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        APPLE_ID_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
        APPLE_ID_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_APP_SPECIFIC_PASSWORD
          }}
        TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: 'echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12

        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

        security default-keychain -s build.keychain

        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

        security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD"
        -T /usr/bin/codesign

        security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD"
        build.keychain

        rm certificate.p12

        find "${{github.workspace}}/app-resources/Coollab-Launcher.app" -name "*.dylib"
        -exec codesign --force --timestamp --options runtime --sign "Developer ID
        Application: Jules Fouchy ($TEAM_ID)" {} \;

        codesign --timestamp --options runtime --sign "Developer ID Application: Jules
        Fouchy ($TEAM_ID)" "${{github.workspace}}/app-resources/Coollab-Launcher.app"

        ditto -c -k --keepParent "${{github.workspace}}/app-resources/Coollab-Launcher.app"
        Coollab-Launcher.zip

        xcrun notarytool submit Coollab-Launcher.zip --apple-id "$APPLE_ID_USERNAME"
        --password "$APPLE_ID_APP_SPECIFIC_PASSWORD" --team-id "$TEAM_ID" --wait

        xcrun stapler staple "${{github.workspace}}/app-resources/Coollab-Launcher.app"

        '
    - name: Create Installer (Windows)
      if: runner.os == 'Windows'
      run: 'cd ${{github.workspace}}/build

        cpack

        '
    - name: Zip Release binaries (MacOS)
      if: runner.os == 'MacOS'
      run: 'ditto -c -k --keepParent "${{github.workspace}}/app-resources/Coollab-Launcher.app"
        Coollab-Launcher-${{matrix.config.name}}.zip

        '
    - name: Build AppImage (Linux)
      if: runner.os == 'Linux'
      run: "cd app-resources\nmkdir -p Coollab-Launcher.AppDir/usr/bin/\ncp -r \"\
        ${{github.workspace}}/bin/Release/\"* Coollab-Launcher.AppDir/usr/bin/\nstrip\
        \ Coollab-Launcher.AppDir/usr/bin/Coollab-Launcher\nchmod +x Coollab-Launcher.AppDir/AppRun\n\
        sudo apt-get install -y appstream\nwget https://github.com/linuxdeploy/linuxdeploy/releases/latest/download/linuxdeploy-x86_64.AppImage\n\
        chmod +x linuxdeploy-x86_64.AppImage\n./linuxdeploy-x86_64.AppImage \\\n \
        \ --appdir Coollab-Launcher.AppDir \\\n  --desktop-file Coollab-Launcher.AppDir/usr/share/applications/Coollab-Launcher.desktop\
        \ \\\n  --icon-file Coollab-Launcher.AppDir/usr/share/icons/hicolor/256x256/apps/Coollab-Launcher.png\
        \ \\\n  --output appimage\nmv Coollab_Launcher-x86_64.AppImage Coollab-Launcher.AppImage\n"
    - name: Release (Windows)
      if: runner.os == 'Windows'
      uses: softprops/action-gh-release@v1
      with:
        files: 'build/${{matrix.config.installer_name}}

          '
    - name: Release (Linux)
      if: runner.os == 'Linux'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{github.workspace}}/app-resources/Coollab-Launcher.AppImage
    - name: Release (MacOS)
      if: runner.os == 'MacOS'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{github.workspace}}/Coollab-Launcher-${{matrix.config.name}}.zip
    - name: Run Velopack Pack
      shell: pwsh
      run: "vpk pack `\n  --packId \"$env:PACK_ID\" `\n  --packVersion \"${{ github.ref_name\
        \ }}\" `\n  --packDir \"$env:BUILD_DIR/Release\" `\n  --mainExe \"$env:MAIN_EXE\"\
        \ `\n"
      if: runner.os == 'Windows'
    - name: Upload .vpk to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        files: '${{ env.RELEASE_DIR }}/*.vpk

          '
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: runner.os == 'Windows'
    - name: Deploy contents of /Releases to gh-pages branch of external repo
      shell: pwsh
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"

        mkdir gh-pages
        cd gh-pages

        git init
        git remote add origin https://x-access-token:${{ secrets.GH_PAGES_DEPLOY_TOKEN }}@github.com/Coollab-Art/Launcher-Velopack-Tests.git
        git checkout -b gh-pages

        Copy-Item ../Releases/* -Destination . -Recurse -Force

        git add .
        git commit -m "Deploy release ${{ github.ref_name }}"
        git push origin gh-pages --force
      if: runner.os == 'Windows'
